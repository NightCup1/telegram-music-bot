import asyncio
import os
from aiogram import Bot, Dispatcher, types
import yt_dlp
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
dp["bot"] = bot  # –ü—Ä–∏–≤—è–∑–∫–∞ –±–æ—Ç–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

@dp.message_handler()
async def download_music(message: types.Message):
    query = message.text
    await message.reply("üîç –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é –º—É–∑—ã–∫—É...")

    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'quiet': True,
        'outtmpl': 'downloaded.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=True)
            file_name = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")

        with open(file_name, "rb") as audio:
            await message.reply_audio(audio, title=info.get('title', "Audio"))

        try:
            os.remove(file_name)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name}: {e}")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é polling...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())


